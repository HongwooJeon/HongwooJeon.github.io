<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://hongwoojeon.github.io/</id><title>Banjung`s Blog</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-08-19T09:09:24+09:00</updated> <author> <name>Banjung</name> <uri>https://hongwoojeon.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://hongwoojeon.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://hongwoojeon.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Banjung </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>인덱스 생성과 관리 &amp; 사용자 관리</title><link href="https://hongwoojeon.github.io/posts/Chap3-1.%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%83%9D%EC%84%B1%EA%B3%BC-%EA%B4%80%EB%A6%AC/" rel="alternate" type="text/html" title="인덱스 생성과 관리 &amp; 사용자 관리" /><published>2022-08-01T11:00:00+09:00</published> <updated>2022-08-01T11:00:00+09:00</updated> <id>https://hongwoojeon.github.io/posts/Chap3-1.%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%83%9D%EC%84%B1%EA%B3%BC-%EA%B4%80%EB%A6%AC/</id> <content src="https://hongwoojeon.github.io/posts/Chap3-1.%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%83%9D%EC%84%B1%EA%B3%BC-%EA%B4%80%EB%A6%AC/" /> <author> <name>Banjung</name> </author> <category term="MongoDB" /> <category term="Chapter 3(인덱스 &amp; 사용자 관리)" /> <summary> 3.1 인덱스 생성과 관리 &amp;gt; db.emp.createIndex({eno:1}, {unique: true}); &amp;gt; db.emp.createIndex({job : -1}); &amp;gt;db.emp.getindexes() &amp;lt;-- emp 컬렉션에 생성된 모든 인덱스를 출력한다. { "v" : 1, "key" : { "eno" : 1 }, "unique" : true, "ns" : "test.emp" "name" : "eno_1" } &amp;gt; db.emp.dropIndexes(); &amp;gt;db.emp.dropIndex({eno : -1}) &amp;lt;-- 해당 인덱스를 삭제한다. &amp;gt;db.runCommand({dropIndex:... </summary> </entry> <entry><title>Chap4 Docker_file2</title><link href="https://hongwoojeon.github.io/posts/Chap4-Docker_File2/" rel="alternate" type="text/html" title="Chap4 Docker_file2" /><published>2022-06-10T00:00:00+09:00</published> <updated>2022-06-10T00:00:00+09:00</updated> <id>https://hongwoojeon.github.io/posts/Chap4-Docker_File2/</id> <content src="https://hongwoojeon.github.io/posts/Chap4-Docker_File2/" /> <author> <name>Banjung</name> </author> <summary> </summary> </entry> <entry><title>클래스 다이어그램</title><link href="https://hongwoojeon.github.io/posts/Class-Diagram/" rel="alternate" type="text/html" title="클래스 다이어그램" /><published>2022-06-01T11:00:00+09:00</published> <updated>2022-06-01T11:00:00+09:00</updated> <id>https://hongwoojeon.github.io/posts/Class-Diagram/</id> <content src="https://hongwoojeon.github.io/posts/Class-Diagram/" /> <author> <name>Banjung</name> </author> <category term="소프트웨어 공학" /> <category term="클래스 다이어그램" /> <summary> 클래스 다이어그램 시간에 따라 변하지 않는 시스템의 정적인 면을 보여주는 대표적인 UML 구조 다이어그램이다. 목적 시스템을 구성하는 클래스들 사이의 관계를 표현한다. 클래스란? 동일한 속성과 행위를 수행하는 객체의 집합 객체를 생성하는 설계도 즉, 클래스는 공통의 속성과 책임을 갖는 객체들의 집합이자 실제 객체를 생성하는 설계도이다. 클래스는 변화의 기본 단위이다. 디자인 패턴을 제대로 이해하려면 만들어진 프로그램을 흔들어보고 어떤 것이 변화되는지를 잘 살펴봐야 한다. UML 클래스 표현 상단: 클래스의 이름 중간: 속성(클래스의 특징) 하단: 연산(클래스가 ... </summary> </entry> <entry><title>Use Case 다이어그램</title><link href="https://hongwoojeon.github.io/posts/UseCase_Diagram/" rel="alternate" type="text/html" title="Use Case 다이어그램" /><published>2022-05-20T11:00:00+09:00</published> <updated>2022-06-03T13:45:54+09:00</updated> <id>https://hongwoojeon.github.io/posts/UseCase_Diagram/</id> <content src="https://hongwoojeon.github.io/posts/UseCase_Diagram/" /> <author> <name>Banjung</name> </author> <category term="소프트웨어 공학" /> <category term="UseCase 다이어그램" /> <summary> 유스케이스 다이어그램(Use Case Diagram) 시스템에서 제공해야하는 기능이나 서비스를 명세하는 단계로 사용자와 시스템 사이의 상호작용을 보여준다. 시스템 범위 위의 예제를 살펴 봤을 때, 많은 사람들이 위 Use case 다이어그램이 ATM시스템을 모델링하고 잇는 중 이라는 것을 알 수 있다. 왜냐하면 커다란 네모에 ATM으로 쓰여져 있기 때문이다. 즉, 우리가 개발하고자 하는 시스템은 사각형으로 표시한다는 것을 자연스레 알 수 있다. 유스케이스(Usecase) 위 예제에서 사각형 안에 동그라미는 뭘까? 이것이 바로 유스케이스이다. 시스템이 어떤 서비스 or 기능을 제공하는지를 명시해 주는 것으로 타원형으로 표시한다. 유스케이스의 이름은 상호작용 수행의... </summary> </entry> <entry><title>UML 다이어그램</title><link href="https://hongwoojeon.github.io/posts/UML_Diagram/" rel="alternate" type="text/html" title="UML 다이어그램" /><published>2022-05-20T11:00:00+09:00</published> <updated>2022-06-03T13:45:54+09:00</updated> <id>https://hongwoojeon.github.io/posts/UML_Diagram/</id> <content src="https://hongwoojeon.github.io/posts/UML_Diagram/" /> <author> <name>Banjung</name> </author> <category term="소프트웨어 공학" /> <category term="UML 다이어그램" /> <summary> 소프트웨어 개발과 모델링 개발자가 소프트웨어를 개발하는 이유는 고객의 문제를 해결하기 위해서이다. 개발에 있어 가장 우선적으로 해야 할 일은 문제를 이해하는 것이다. 이 때, 문제를 잘 해결하기 위해서 하는 것이 모델링 이다. 애자일 기법이든 폭포수 모델이든 분석, 설계, 구현, 테스트 과정을 거친다. 실제로 개발하는 단계는 구현 단계여야한다. 즉 모델링은 이 구현단계 전에 해야하여 이 때, 사용하는 언어가 UML이다. UML 다이어그램 UML(Unified Modeling Language)란? 시스템 개발자가 자신의 비전을 구축하고 반영하는데 있어 표준적이고 이해하기 쉬운 방법으로 할 수 있도록 도와주며, 자신의 설계 결과물을 다른사람에... </summary> </entry> </feed>
